# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'health_report_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from controller.database_io import db_query_data
from controller.graph_producer import plot_controller
from controller.graph_producer.plot_controller import *
import datetime
"""
Author: GRP group 14
"""

class Ui_report_window(object):
    def setup(self, Dialog):
        Dialog.setObjectName("Health Report")
        Dialog.resize(820, 677)
        self.scrollArea = QtWidgets.QScrollArea(Dialog)
        self.scrollArea.setEnabled(True)
        self.scrollArea.setGeometry(QtCore.QRect(0, 0, 821, 681))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 798, 2250))
        self.scrollAreaWidgetContents.setMinimumSize(QtCore.QSize(795, 2250))
        self.scrollAreaWidgetContents.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.tabWidget = QtWidgets.QTabWidget(self.scrollAreaWidgetContents)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.tabWidget.setFont(font)
        self.tabWidget.setUsesScrollButtons(True)
        self.tabWidget.setObjectName("tabWidget")
        self.weekly = QtWidgets.QWidget()
        self.weekly.setObjectName("weekly")
        self.week_bm_label = QtWidgets.QLabel(self.weekly)
        self.week_bm_label.setGeometry(QtCore.QRect(370, 1510, 71, 31))
        self.week_bm_label.setAlignment(QtCore.Qt.AlignCenter)
        self.week_bm_label.setObjectName("week_bm_label")
        self.week_hr_text = QtWidgets.QLabel(self.weekly)
        self.week_hr_text.setGeometry(QtCore.QRect(40, 650, 711, 131))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.week_hr_text.setFont(font)
        self.week_hr_text.setObjectName("week_hr_text")
        self.week_hr_graph = QtWidgets.QLabel(self.weekly)
        self.week_hr_graph.setGeometry(QtCore.QRect(0, 150, 800, 480))
        self.week_hr_graph.setText("")
        self.week_hr_graph.setPixmap(QtGui.QPixmap("view/img/graph/rhr_Week.png"))
        self.week_hr_graph.setScaledContents(True)
        self.week_hr_graph.setObjectName("week_hr_graph")
        self.week_time = QtWidgets.QLabel(self.weekly)
        self.week_time.setGeometry(QtCore.QRect(270, 60, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.week_time.setFont(font)
        self.week_time.setAlignment(QtCore.Qt.AlignCenter)
        self.week_time.setObjectName("week_time")
        self.week_bp_text = QtWidgets.QLabel(self.weekly)
        self.week_bp_text.setGeometry(QtCore.QRect(40, 1330, 711, 131))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.week_bp_text.setFont(font)
        self.week_bp_text.setObjectName("week_bp_text")
        self.week_hr_label = QtWidgets.QLabel(self.weekly)
        self.week_hr_label.setGeometry(QtCore.QRect(320, 115, 171, 31))
        self.week_hr_label.setObjectName("week_hr_label")
        self.week_bm_text = QtWidgets.QLabel(self.weekly)
        self.week_bm_text.setGeometry(QtCore.QRect(40, 2040, 711, 121))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.week_bm_text.setFont(font)
        self.week_bm_text.setObjectName("week_bm_text")
        self.week_label = QtWidgets.QLabel(self.weekly)
        self.week_label.setGeometry(QtCore.QRect(260, 20, 291, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.week_label.setFont(font)
        self.week_label.setObjectName("week_label")
        self.week_bm_graph = QtWidgets.QLabel(self.weekly)
        self.week_bm_graph.setGeometry(QtCore.QRect(0, 1540, 800, 480))
        self.week_bm_graph.setText("")
        self.week_bm_graph.setPixmap(QtGui.QPixmap("view/img/graph/BMI_Week.png"))
        self.week_bm_graph.setScaledContents(True)
        self.week_bm_graph.setObjectName("week_bm_graph")
        self.week_bp_graph = QtWidgets.QLabel(self.weekly)
        self.week_bp_graph.setGeometry(QtCore.QRect(0, 840, 800, 480))
        self.week_bp_graph.setText("")
        self.week_bp_graph.setPixmap(QtGui.QPixmap("view/img/graph/bp_Week.png"))
        self.week_bp_graph.setScaledContents(True)
        self.week_bp_graph.setObjectName("week_bp_graph")
        self.week_bp_label = QtWidgets.QLabel(self.weekly)
        self.week_bp_label.setGeometry(QtCore.QRect(340, 820, 141, 16))
        self.week_bp_label.setObjectName("week_bp_label")
        self.tabWidget.addTab(self.weekly, "")
        self.monthly = QtWidgets.QWidget()
        self.monthly.setObjectName("monthly")
        self.month_bm_label = QtWidgets.QLabel(self.monthly)
        self.month_bm_label.setGeometry(QtCore.QRect(370, 1500, 71, 31))
        self.month_bm_label.setAlignment(QtCore.Qt.AlignCenter)
        self.month_bm_label.setObjectName("month_bm_label")
        self.month_bp_label = QtWidgets.QLabel(self.monthly)
        self.month_bp_label.setGeometry(QtCore.QRect(340, 820, 141, 16))
        self.month_bp_label.setObjectName("month_bp_label")
        self.month_time = QtWidgets.QLabel(self.monthly)
        self.month_time.setGeometry(QtCore.QRect(270, 60, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.month_time.setFont(font)
        self.month_time.setAlignment(QtCore.Qt.AlignCenter)
        self.month_time.setObjectName("month_time")
        self.month_hr_label = QtWidgets.QLabel(self.monthly)
        self.month_hr_label.setGeometry(QtCore.QRect(320, 115, 171, 31))
        self.month_hr_label.setObjectName("month_hr_label")
        self.month_bp_graph = QtWidgets.QLabel(self.monthly)
        self.month_bp_graph.setGeometry(QtCore.QRect(0, 840, 800, 480))
        self.month_bp_graph.setText("")
        self.month_bp_graph.setPixmap(QtGui.QPixmap("view/img/graph/bp_Month.png"))
        self.month_bp_graph.setScaledContents(True)
        self.month_bp_graph.setObjectName("month_bp_graph")
        self.month_bm_text = QtWidgets.QLabel(self.monthly)
        self.month_bm_text.setGeometry(QtCore.QRect(40, 2030, 711, 121))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.month_bm_text.setFont(font)
        self.month_bm_text.setObjectName("month_bm_text")
        self.month_hr_graph = QtWidgets.QLabel(self.monthly)
        self.month_hr_graph.setGeometry(QtCore.QRect(0, 150, 800, 480))
        self.month_hr_graph.setText("")
        self.month_hr_graph.setPixmap(QtGui.QPixmap("view/img/graph/rhr_Month.png"))
        self.month_hr_graph.setScaledContents(True)
        self.month_hr_graph.setObjectName("month_hr_graph")
        self.month_hr_text = QtWidgets.QLabel(self.monthly)
        self.month_hr_text.setGeometry(QtCore.QRect(40, 650, 711, 131))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.month_hr_text.setFont(font)
        self.month_hr_text.setObjectName("month_hr_text")
        self.month_bm_graph = QtWidgets.QLabel(self.monthly)
        self.month_bm_graph.setGeometry(QtCore.QRect(0, 1530, 800, 480))
        self.month_bm_graph.setText("")
        self.month_bm_graph.setPixmap(QtGui.QPixmap("view/img/graph/BMI_Month.png"))
        self.month_bm_graph.setScaledContents(True)
        self.month_bm_graph.setObjectName("month_bm_graph")
        self.month_bp_text = QtWidgets.QLabel(self.monthly)
        self.month_bp_text.setGeometry(QtCore.QRect(40, 1340, 711, 131))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(11)
        self.month_bp_text.setFont(font)
        self.month_bp_text.setObjectName("month_bp_text")
        self.month_label = QtWidgets.QLabel(self.monthly)
        self.month_label.setGeometry(QtCore.QRect(250, 20, 301, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.month_label.setFont(font)
        self.month_label.setObjectName("month_label")
        self.tabWidget.addTab(self.monthly, "")
        self.horizontalLayout_2.addWidget(self.tabWidget)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(8)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Health Report"))
        self.week_bm_label.setText(_translate("Dialog", "Weight"))
        hr_text_weekly = self.advice_hr_weekly()
        self.week_hr_text.setText(_translate("Dialog", hr_text_weekly))
        date_range = self.get_week_range()
        self.week_time.setText(_translate("Dialog", date_range))
        bp_text_weekly = self.advice_bp_weekly()
        self.week_bp_text.setText(_translate("Dialog", bp_text_weekly))
        self.week_hr_label.setText(_translate("Dialog", "Resting Heart Rate"))
        bm_text = self.advice_bm_weekly()
        self.week_bm_text.setText(_translate("Dialog", bm_text))
        self.week_label.setText(_translate("Dialog", "Weekly Health Report"))
        self.week_bp_label.setText(_translate("Dialog", "Blood Pressure"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.weekly), _translate("Dialog", "weekly"))
        self.month_bm_label.setText(_translate("Dialog", "Weight"))
        self.month_bp_label.setText(_translate("Dialog", "Blood Pressure"))
        date_range = self.get_month_range()
        self.month_time.setText(_translate("Dialog", date_range))
        self.month_hr_label.setText(_translate("Dialog", "Resting Heart Rate"))
        hr_text_monthly = self.advice_hr_monthly()
        bm_text_monthly = self.advice_bm_monthly()
        bp_text_monthly = self.advice_bp_monthly()
        self.month_bm_text.setText(_translate("Dialog", bm_text_monthly))
        self.month_hr_text.setText(_translate("Dialog", hr_text_monthly))
        self.month_bp_text.setText(_translate("Dialog", bp_text_monthly))
        self.month_label.setText(_translate("Dialog", "Monthly Health Report"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.monthly), _translate("Dialog", "monthly"))


    def get_week_range(self):
        start = (datetime.datetime.now() - datetime.timedelta(days=8)).strftime('%Y-%m-%d')
        end = (datetime.datetime.now() - datetime.timedelta(days=1)).strftime('%Y-%m-%d')
        return start + " ~ " + end

    def get_month_range(self):
        start = (datetime.datetime.now() - datetime.timedelta(days=31)).strftime('%Y-%m-%d')
        end = (datetime.datetime.now() - datetime.timedelta(days=1)).strftime('%Y-%m-%d')
        return start + " ~ " + end

    def advice_hr_weekly(self):
        hr = db_query_data.get_specified_value("-8d","-0d","1d","mean","HeartRate")
        hr = plot_controller.data_integrate(hr,'value')
        y = hr['value'].tolist()
        mean = np.sum(y)/len(y)
        str = "Your resting heart rate, or pulse, is the number of times your heat beats per minute \nwhen you are at rest-such as when you are relaxed, sitting or lying down.\n(Normal range:60-80)\n"
        if mean<60:
            return str + "Your average heart rate is below the normal range"
        elif mean>80:
            return str + "Your average heart rate is beyond the normal range"
        else:
            return str + "Your average heart rate is within the normal range"

    def advice_hr_monthly(self):
        hr = db_query_data.get_specified_value("-31d", "-0d", "1d", "mean", "HeartRate")
        hr = plot_controller.data_integrate(hr,'value')
        y = hr['value'].tolist()
        mean = np.sum(y)/len(y)
        str = "Your resting heart rate, or pulse, is the number of times your heat beats per minute \nwhen you are at rest-such as when you are relaxed, sitting or lying down.\n(Normal range:60-80)\n"
        if mean<60:
            return str + "Your average heart rate is below the normal range"
        elif mean>80:
            return str + "Your average heart rate is beyond the normal range"
        else:
            return str + "Your average heart rate is within the normal range"

    def advice_bm_weekly(self):
        bm_last = db_query_data.get_specified_value("-16d","-8d","1d","mean","Weight")
        bm_last = plot_controller.data_integrate(bm_last,'value')
        bmi_last=bmi_calculator(bm_last)
        bmi_last_list = bmi_last['value'].tolist()
        bmi_last_mean = np.sum(bmi_last_list)/len(bmi_last_list)
        bm_now = db_query_data.get_specified_value("-8d","-0d","1d","mean","Weight")
        bm_now = plot_controller.data_integrate(bm_now,'value')
        bmi_now=bmi_calculator(bm_now)
        bmi_now_list = bmi_now['value'].tolist()
        bmi_now_mean = np.sum(bmi_now_list)/len(bmi_now_list)
        str = "The body mass index(BMI) is a measure that uses your weight is healthy. \nFor most adults, an ideal BMI is in the 18.5 to 24.9 range.\n"
        if bmi_last_mean>bmi_now_mean:
            str = str + "Your bmi is lower than last week.\n"
        elif bmi_last_mean<bmi_now_mean:
            str = str+ "Your bmi is higher than last week.\n"
        else:
            str = "Your bmi is the same as last week.\n"
        if bmi_now_mean<18.5:
            str = str + "Your figure is underweight this week."
        elif bmi_now_mean>24.9 and bmi_now_mean<29.9:
            str = str + "Your figure is overweight this week."
        elif bmi_now_mean>29.9:
            str = str + "Your figure is obese this week."
        else:
            str = str + "You are in perfect shape!"
        return str

    def advice_bm_monthly(self):
        bm_last = db_query_data.get_specified_value("-31d", "-0d", "1d", "mean", "Weight")
        bm_last = plot_controller.data_integrate(bm_last,'value')
        bmi_last=bmi_calculator(bm_last)
        bmi_last_list = bmi_last['value'].tolist()
        bmi_last_mean = np.sum(bmi_last_list)/len(bmi_last_list)
        bm_now = db_query_data.get_specified_value("-8d","-0d","1d","mean","Weight")
        bm_now = plot_controller.data_integrate(bm_now,'value')
        bmi_now=bmi_calculator(bm_now)
        bmi_now_list = bmi_now['value'].tolist()
        bmi_now_mean = np.sum(bmi_now_list)/len(bmi_now_list)
        str = "The body mass index(BMI) is a measure that uses your weight is healthy. \nFor most adults, an ideal BMI is in the 18.5 to 24.9 range.\n"
        if bmi_last_mean>bmi_now_mean:
            str = str + "Your bmi is lower than last month.\n"
        elif bmi_last_mean<bmi_now_mean:
            str = str+ "Your bmi is higher than last month.\n"
        else:
            str = "Your bmi is the same as last month.\n"
        if bmi_now_mean<18.5:
            str = str + "Your figure is underweight this week."
        elif bmi_now_mean>24.9 and bmi_now_mean<29.9:
            str = str + "Your figure is overweight this week."
        elif bmi_now_mean>29.9:
            str = str + "Your figure is obese this week."
        else:
            str = str + "You are in perfect shape!"
        return str

    def advice_bp_weekly(self):
        bp_systolic = db_query_data.get_specified_value_pro("-8d", "-0d", "1d", "mean", "BloodPressure","systolic")
        bp_diastolic =db_query_data.get_specified_value_pro("-8d", "-0d", "1d", "mean", "BloodPressure" ,"diastolic")
        bp_systolic= plot_controller.data_integrate(bp_systolic,"systolic")
        print(bp_systolic)
        bp_diastolic = plot_controller.data_integrate(bp_diastolic,"diastolic")
        print(bp_diastolic)
        sys = bp_systolic['value'].tolist()
        dia = bp_diastolic['value'].tolist()
        basic_str = "Systolic:the pressure when your heart pushed blood out: 90-120 mmHg\n Diastolic:the pressure when your heart rests between beats: 60-80 mmHg\n"
        i = 0 #systolic below
        j = 0 #systolic beyond
        p = 0 #diastolic below
        q = 0 #diastolic beyond
        for s in sys:
            print("s")
            if s<90:
                i=i+1
            elif s>120:
                j=j+1
        for d in dia:
            if d<60:
                p=p+1
            elif d>80:
                q=q+1

        if i==0 and j==0 and p==0 and q==0:
            return basic_str+ "Your blood pressure is normal."
        elif i==0 and j==0:
            return basic_str+ "Your systolic is normal this week.\n There are "+ str(p) +" days this week your diastolic is below normal range.\n There are "+ str(q) +" days this week your diastolic is beyond normal range."
        elif p==0 and q==0:
            return basic_str+ "Your diastolic is normal this week.\n There are" + str(
                i) + "days this week your systolic is below normal range.\n There are" + str(
                j) + "days this week your systolic is beyond normal range."
        else:
            return "nnnnn"
            return basic_str+ "There are "+str(
                i) + " days this week your systolic is below normal range.\n There are " + str(
                j) + " days this week your systolic is beyond normal range.\n"+"There are "+str(p)+" days this week your diastolic is below normal range.\n There are "+str(q)+" days this week your diastolic is beyond normal range."


    def advice_bp_monthly(self):
        bp_systolic = db_query_data.get_specified_value_pro("-31d", "-0d", "1d", "mean", "BloodPressure", "systolic")
        bp_diastolic =db_query_data.get_specified_value_pro("-31d", "-0d", "1d", "mean", "BloodPressure", "diastolic")
        bp_systolic= plot_controller.data_integrate(bp_systolic,"systolic")
        print(bp_systolic)
        bp_diastolic = plot_controller.data_integrate(bp_diastolic,"diastolic")
        print(bp_diastolic)
        sys = bp_systolic['value'].tolist()
        dia = bp_diastolic['value'].tolist()
        basic_str = "Systolic:the pressure when your heart pushed blood out: 90-120 mmHg\n Diastolic:the pressure when your heart rests between beats: 60-80 mmHg\n"
        i = 0 #systolic below
        j = 0 #systolic beyond
        p = 0 #diastolic below
        q = 0 #diastolic beyond
        for s in sys:
            if s<90:
                i=i+1
            elif s>120:
                j=j+1
        for d in dia:
            if d<60:
                p=p+1
            elif d>80:
                q=q+1
        if i==0 and j==0 and p==0 and q==0:
            return basic_str+ "Your blood pressure is normal."
        elif i==0 and j==0:
            return basic_str+ "Your systolic is normal this month.\n There are "+ str(p)+" days this month your diastolic is below normal range.\n There are "+str(q)+" days this month your diastolic is beyond normal range."
        elif p==0 and q==0:
            return basic_str+ "Your diastolic is normal this month.\n There are " + str(
                i) + " days this month your systolic is below month range.\n There are " +  str(
                j) + " days this month your systolic is beyond normal range."
        else:
            return basic_str+ "There are "+ str(
                i) + " days this month your systolic is below normal range.\n There are " + str(
                j) + " days this month your systolic is beyond normal range.\n"+"There are "+str(p)+" days this month your diastolic is below normal range.\n There are "+str(q)+" days this month your diastolic is beyond normal range."


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_report_window()
    ui.setup(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
